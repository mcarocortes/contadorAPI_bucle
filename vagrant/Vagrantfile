Vagrant.configure("2") do |config|
  (1..4).each do |i|
    config.vm.define "vm#{i}" do |vm_config|
      # Especifica la caja base de Ubuntu
      vm_config.vm.box = "ubuntu/xenial64"

      # Configura una red privada con una IP fija
      vm_config.vm.network "private_network", ip: "192.168.88.#{i + 10}"

      # Configura los recursos de hardware
      vm_config.vm.provider "virtualbox" do |vb|
        vb.memory = "2048"  # 2 GB de memoria
        vb.cpus = 1         # 1 CPU
      end

      # Copia la clave pública generada en el host a la VM
      vm_config.vm.provision "file", source: "C:/Users/mcaro/.ssh/practica_contadorBucle.pub", destination: "/home/vagrant/.ssh/practica_contadorBucle.pub"

      # Configuración inicial del servidor SSH
      vm_config.vm.provision "shell", run: "once" do |s|
        s.inline = <<-SHELL
          # Actualizar e instalar dependencias
          apt-get update || (echo "Error al actualizar paquetes"; exit 1)
          apt-get install -y openssh-server python3 python3-pip cron unixodbc-dev || (echo "Error al instalar dependencias"; exit 1)

          # Desinstalar pip actual si es necesario
          python3 -m pip uninstall -y pip || echo "No se pudo desinstalar pip, continuando..."
          # Instalar una versión compatible de pip
          curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py || (echo "Error al descargar get-pip.py"; exit 1)
          python3 get-pip.py "pip==20.3.4" || (echo "Error al instalar pip 20.3.4"; exit 1)

          # Instalar el Controlador ODBC para SQL Server
          curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - || (echo "Error al añadir clave Microsoft"; exit 1)
          curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list || (echo "Error al añadir lista de paquetes MSSQL"; exit 1)
          apt-get update || (echo "Error al actualizar paquetes después de MSSQL"; exit 1)
          ACCEPT_EULA=Y apt-get install -y msodbcsql17 || (echo "Error al instalar el controlador ODBC para SQL Server"; exit 1)

          pip3 install pyodbc || (echo "Error al instalar pyodbc"; exit 1)
          echo "Dependencias instaladas correctamente."

          # Configurar el hostname
          echo "Setting hostname to vm#{i}"
          hostnamectl set-hostname vm#{i}
          echo "127.0.0.1 vm#{i}" >> /etc/hosts
          echo "Hostname configurado."
        SHELL
      end

      # Configuración de SSH Y CRON (siempre)
      vm_config.vm.provision "shell", run: "always" do |s|
        s.inline = <<-SHELL
          # Configurar el servidor SSH para aceptar claves públicas
          sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config || (echo "Error al modificar sshd_config"; exit 1)
          sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config || (echo "Error al modificar sshd_config"; exit 1)
          echo "Configuración de SSH actualizada."

          # Crear el directorio .ssh si no existe
          mkdir -p /home/vagrant/.ssh || (echo "Error al crear directorio .ssh"; exit 1)
          chmod 700 /home/vagrant/.ssh || (echo "Error al cambiar permisos de .ssh"; exit 1)
          chown vagrant:vagrant /home/vagrant/.ssh || (echo "Error al cambiar propietario de .ssh"; exit 1)
          echo "Directorio .ssh configurado."

          # Verificar si el archivo de clave pública existe
          if [ ! -f /home/vagrant/.ssh/practica_contadorBucle.pub ]; then
            echo "El archivo de clave pública no existe"
            exit 1
          fi

          # Sobrescribir el contenido de authorized_keys con la clave pública
          cat /home/vagrant/.ssh/practica_contadorBucle.pub > /home/vagrant/.ssh/authorized_keys || (echo "Error al escribir authorized_keys"; exit 1)
          chmod 600 /home/vagrant/.ssh/authorized_keys || (echo "Error al cambiar permisos de authorized_keys"; exit 1)
          chown vagrant:vagrant /home/vagrant/.ssh/authorized_keys || (echo "Error al cambiar propietario de authorized_keys"; exit 1)
          echo "Clave pública configurada."

          # Reiniciar el servidor SSH
          systemctl restart sshd || (echo "Error al reiniciar sshd"; exit 1)

          # Verificar la existencia de contador.py
          if [ ! -f /vagrant/contador/contador.py ]; then
            echo "Error: El archivo /vagrant/contador/contador.py no existe."
            exit 1
          fi

          # Dar permisos a contador.py
          chmod +x /vagrant/contador/contador.py || (echo "Error al dar permisos de ejecución a contador.py"; exit 1)
          echo "Script contador.py configurado."

          # Configurar CRON para ejecutar el script cada 1 minuto
          CRON_JOB="*/1 * * * * /usr/bin/python3 /vagrant/contador/contador.py >> /vagrant/contador.log 2>&1"
          if ! crontab -l | grep -Fxq "$CRON_JOB"; then
            # Configurar CRON para ejecutar el script cada 1 minuto
            (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -
            echo "Tarea CRON configurada."
          else
            echo "La tarea CRON ya existe, no se agrega nuevamente."
          fi
        SHELL
      end

      # Evitar prompts de SSH y especificar la clave personalizada
      vm_config.ssh.private_key_path = ["C:/Users/mcaro/.ssh/practica_contadorBucle", "~/.vagrant.d/insecure_private_key"]
      # Evitar prompts de SSH
      vm_config.ssh.insert_key = false
      vm_config.ssh.extra_args = ["-o StrictHostKeyChecking=no", "-o UserKnownHostsFile=/dev/null"]
    end
  end
end
